Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
How many singers do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the total number of singers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show name, country, age for all singers ordered by age from the oldest to the youngest."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names, countries, and ages for every singer in descending order of age?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country ( France ), song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the average, minimum, and maximum age of all singers from France?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the average, minimum, and maximum age for all French singers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show the name and the release year of the song by the youngest singer."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names and release years for all the songs of the youngest singer?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are all distinct countries where singers above age 20 are from?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are  the different countries with singers above age 20?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show all countries and the number of singers in each country."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
How many singers are from each country?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
List all song names by singers above the average age."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are all the song names by singers who are older than average?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show location and name for all stadiums with a capacity between 5000 and 10000."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the locations and names of all stations with capacity between 5000 and 10000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the maximum capacity and the average of all stadiums ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the average and maximum capacities for all stadiums ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the name and capacity for the stadium with highest average attendance?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the name and capacity for the stadium with the highest average attendance?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
How many concerts are there in year 2014 or 2015?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
How many concerts occurred in 2014 or 2015?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show the stadium name and the number of concerts in each stadium."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
For each stadium, how many concerts play there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show the stadium name and capacity with most number of concerts in year 2014 or after."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the name and capacity of the stadium with the most concerts after 2013 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Which year has most number of concerts?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the year that had the most concerts?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show the stadium names without any concert."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names of the stadiums without any concerts?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show countries where a singer above age 40 and a singer below 30 are from."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show names for all stadiums except for stadiums having a concert in year 2014."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names of all stadiums that did not have a concert in 2014?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Show the name and theme for all concerts and the number of singers in each concert."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names , themes , and number of singers for every concert ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
List singer names and number of concerts for each singer."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names of the singers and number of concerts for each person?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
List all singer names in concerts in year 2014."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names of the singers who performed in a concert in 2014?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
what is the name and nation of the singer who have a song having 'Hey' in its name?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
Find the number of concerts happened in the stadium with the highest capacity ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# stadium ( stadium_id, location, name, capacity, highest, lowest, average )
# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )
# concert ( concert_id, concert_name, theme, stadium_id, year )
# singer_in_concert ( concert_id, singer_id )

Question:
What are the number of concerts that occurred in the stadium with the largest capacity ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the number of pets whose weight is heavier than 10."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
How many pets have a greater weight than 10?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( dog ), pet_age, weight )

Question:
Find the weight of the youngest dog."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( dog ), pet_age, weight )

Question:
How much does the youngest dog weigh?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the maximum weight for each type of pet. List the maximum weight and pet type."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
List the maximum weight and type for each type of pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find number of pets owned by students who are older than 20."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
How many pets are owned by students that have an age greater than 20?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( dog ), pet_age, weight )

Question:
Find the number of dog pets that are raised by female students (with sex F)."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( dog ), pet_age, weight )

Question:
How many dog pets are raised by female students?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the number of distinct type of pets."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
How many different types of pet are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
Find the first name of students who have cat or dog pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
What are the first names of every student who has a cat or dog as a pet?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
Find the first name of students who have both cat and dog pets ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
What are the students' first names who have both cats and dogs as pets?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
Find the major and age of students who do not have a cat pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
What major is every student who does not own a cat as a pet, and also how old are they?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
Find the id of students who do not have a cat pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
What are the ids of the students who do not own cats as pets?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
Find the first name and age of students who have a dog but do not have a cat as a pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat, dog ), pet_age, weight )

Question:
What is the first name of every student who has a dog but does not have a cat?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the type and weight of the youngest pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What type of pet is the youngest animal, and how much does it weigh?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the id and weight of all pets whose age is older than 1."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the id and weight of every pet who is older than 1?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the average and maximum age for each type of pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the average and maximum age for each pet type?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the average weight for each pet type."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the average weight for each type of pet?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the first name and age of students who have a pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What are the different first names and ages of the students who do have pets?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the id of the pet owned by student whose last name is 'Smith'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the id of the pet owned by the student whose last name is 'Smith'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the number of pets for each student who has any pet and student id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
For students who have pets , how many pets does each student have ? list their ids instead of names ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the first name and gender of student who have more than one pet."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the first name and gender of the all the students who have more than one pet?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
Find the last name of the student who has a cat that is age 3."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype ( cat ), pet_age, weight )

Question:
What is the last name of the student who has a cat that is 3 years old?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
Find the average age of students who do not have any pet ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# student ( stuid, lname, fname, age, sex, major, advisor, city_code )
# has_pet ( stuid, petid )
# pets ( petid, pettype, pet_age, weight )

Question:
What is the average age for all students who do not own any pets ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many continents are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of continents?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many countries does each continent have? List the continent id, continent name and the number of countries."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
For each continent, list its id, name, and how many countries it has?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many countries are listed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many countries exist?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many models does each car maker produce? List maker full name, id and the number."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the full name of each car maker, along with its id and how many models it produces?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which model of the car has the minimum horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the model of the car with the smallest amount of horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Find the model of the car whose weight is below the average weight."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the model for the car with a weight smaller than the average?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Find the name of the makers that produced some cars in the year of 1970?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the name of the different car makers who produced a car in 1970?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Find the make and production time of the cars that were produced in the earliest year?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maker of the carr produced in the earliest year and what year was it?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which distinct car models are the produced after 1980?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the different models for the cards produced after 1980?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many car makers are there in each continents? List the continent name and the count."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the name of each continent and how many car makers are there in each one?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which of the countries has the most car makers? List the country name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the name of the country with the most car makers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many car models are produced by each maker ? Only list the count and the maker full name ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of car models that are produced by each maker and what is the id and full name of each maker?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( amc ), fullname, country )
# model_list ( modelid, maker, model ( amc ) )
# car_names ( makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the accelerate of the car make amc hornet sportabout (sw)?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( amc ), fullname, country )
# model_list ( modelid, maker, model ( amc ) )
# car_names ( makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How much does the car accelerate that makes amc hornet sportabout (sw)?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname ( france ), continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many car makers are there in france?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname ( france ), continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of makers of care in France?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname ( usa ), continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many car models are produced in the usa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the count of the car models produced in the United States?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average miles per gallon(mpg) of the cars with 4 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average miles per gallon of all the cards with 4 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the smallest weight of the car produced with 8 cylinders on 1974 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the minimum weight of the car with 8 cylinders produced in 1974 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are all the makers and models?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the makers and models?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the countries having at least one car maker? List name and id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the names and ids of all countries with at least one car maker?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of the cars with horsepower more than 150?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of cars with a horsepower greater than 150?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average weight of cars each year?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average weight and year for each year?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent ( europe ) )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which countries in europe have at least 3 car manufacturers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent ( europe ) )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the names of all European countries with at least 3 manufacturers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maximum horsepower and the make of the car models with 3 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which model saves the most gasoline? That is to say, have the maximum miles per gallon."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the car model with the highest mpg ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average horsepower of the cars before 1980?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average horsepower for all cars produced before 1980 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( volvo ), fullname ( Volvo ), country )
# model_list ( modelid, maker, model ( volvo ) )
# car_names ( makeid, model ( volvo ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average edispl of the cars of model volvo?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( volvo ), fullname, country )
# model_list ( modelid, maker, model ( volvo ) )
# car_names ( makeid, model ( volvo ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the average edispl for all volvos?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maximum accelerate for different number of cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maximum accelerate for all the different cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which model has the most version(make) of cars?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What model has the most different versions?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many cars have more than 4 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of cars with more than 4 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
how many cars were produced in 1980?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
In 1980, how many cars were made?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent ( america ) )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname ( American Motor Company ), country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many car models were produced by the maker with full name American Motor Company?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent ( america ) )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname ( American Motor Company ), country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of car models created by the car maker American Motor Company?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which makers designed more than 3 car models? List full name and the id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the names and ids of all makers with more than 3 models?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname ( General Motors ), country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname ( General Motors ), country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the different models created by either the car maker General Motors or weighed more than 3500?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
In which years cars were produced weighing no less than 3000 and no more than 4000 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the horsepower of the car with the largest accelerate?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the horsepower of the car with the greatest accelerate?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( volvo ), fullname ( Volvo ), country )
# model_list ( modelid, maker, model ( volvo ) )
# car_names ( makeid, model ( volvo ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
For model volvo, how many cylinders does the car with the least accelerate have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( volvo ), fullname ( Volvo ), country )
# model_list ( modelid, maker, model ( volvo ) )
# car_names ( makeid, model ( volvo ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
For a volvo model, how many cylinders does the version with least accelerate have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many cars have a larger accelerate than the car with the largest horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of cars with a greater accelerate than the one with the most horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many countries has more than 2 car makers ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of countries with more than 2 car makers ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
How many cars has over 6 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the number of carsw ith over 6 cylinders?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
For the cars with 4 cylinders, which model has the largest horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
For all of the 4 cylinder cars, which model has the most horsepower?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( ford ), fullname ( Ford Motor Company ), country )
# model_list ( modelid, maker, model ( ford ) )
# car_names ( makeid, model ( ford ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( ford ), fullname ( Ford Motor Company ), country )
# model_list ( modelid, maker, model ( ford ) )
# car_names ( makeid, model ( ford ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the name of the countries where there is not a single car maker?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the names of the countries with no car makers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker, fullname, country )
# model_list ( modelid, maker, model )
# car_names ( makeid, model, make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( fiat ), fullname ( Fiat ), country )
# model_list ( modelid, maker, model ( fiat ) )
# car_names ( makeid, model ( fiat ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# continents ( contid, continent )
# countries ( countryid, countryname, continent )
# car_makers ( id, maker ( fiat ), fullname ( Fiat ), country )
# model_list ( modelid, maker, model ( fiat ) )
# car_names ( makeid, model ( fiat ), make )
# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )

Question:
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which country does Airline \"JetBlue Airways\" belong to?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What country is Jetblue Airways affiliated with?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the abbreviation of Airline \"JetBlue Airways\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which abbreviation corresponds to Jetblue Airways?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country ( USA ) )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
List all airline names and their abbreviations in \"USA\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country ( USA ) )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are the airline names and abbreviations for airlines in the USA?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
List the airport code and name in the city of Anthony."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the airport code and airport name corresonding to the city Anthony."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many airlines do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the total number of airlines?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many airports do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Return the number of  airports."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Return the number of flights."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation ( UAL ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which airline has abbreviation 'UAL'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation ( UAL ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the airline with abbreviation 'UAL'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country ( USA ) )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many airlines are from USA?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country ( USA ) )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Return the number of airlines in the USA."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which city and country is the Alton airport at?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the city and country for the Alton airport."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AKO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AKO ), destairport ( AKO ) )

Question:
What is the airport name for airport 'AKO'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AKO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AKO ), destairport ( AKO ) )

Question:
Return the name of the airport with code 'AKO'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are airport names at City 'Aberdeen'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are the names of airports in Aberdeen?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
How many flights depart from 'APG'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
Count the number of flights departing from 'APG'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( ATO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( ATO ), destairport ( ATO ) )

Question:
How many flights have destination ATO?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( ATO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( ATO ), destairport ( ATO ) )

Question:
Count the number of flights into ATO."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights depart from City Aberdeen?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Return the number of flights departing from Aberdeen."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights arriving in Aberdeen city?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Return the number of flights arriving in Aberdeen."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights fly from Aberdeen to Ashley?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights does airline 'JetBlue Airways' have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the number of Jetblue Airways flights."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode ( ASY ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( ASY ), destairport ( ASY ) )

Question:
How many 'United Airlines' flights go to Airport 'ASY'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode ( ASY ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( ASY ), destairport ( ASY ) )

Question:
Count the number of United Airlines flights arriving in ASY Airport."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
How many 'United Airlines' flights depart from Airport 'AHD'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
Return the number of United Airlines flights leaving from AHD Airport."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many United Airlines flights go to City 'Aberdeen'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Count the number of United Airlines flights that arrive in Aberdeen."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which city has most number of arriving flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which city has the most frequent destination airport?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which city has most number of departing flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which city is the most frequent source airport?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the code of airport that has the highest number of flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the airport code of the airport with the most flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the code of airport that has fewest number of flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the code of the airport with the least flights."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which airline has most number of flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What airline serves the most flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Find the abbreviation and country of the airline that has fewest number of flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What is the abbreviation of the airilne has the fewest flights and what country is it in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
What are airlines that have some flight departing from airport 'AHD'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
Which airlines have a flight with source airport AHD?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
What are airlines that have flights arriving at airport 'AHD'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( AHD ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( AHD ), destairport ( AHD ) )

Question:
Which airlines have a flight with destination airport AHD?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG, CVO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO ) )

Question:
Find all airlines that have flights from both airports 'APG' and 'CVO'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG, CVO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO ) )

Question:
Which airlines have departing flights from both APG and CVO airports?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG, CVO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO ) )

Question:
Find all airlines that have flights from airport 'CVO' but not from 'APG'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG, CVO ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO ) )

Question:
Which airlines have departures from CVO but not from APG airports?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Find all airlines that have at least 10 flights."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which airlines have at least 10 flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Find all airlines that have fewer than 200 flights."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which airlines have less than 200 flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are flight numbers of Airline \"United Airlines\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline ( United Airlines ), abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which flight numbers correspond to United Airlines flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
What are flight numbers of flights departing from Airport \"APG\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
Give the flight numbers of flights leaving from APG."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
What are flight numbers of flights arriving at Airport \"APG\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode ( APG ), airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport ( APG ), destairport ( APG ) )

Question:
Give the flight numbers of flights landing at APG."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are flight numbers of flights departing from City \"Aberdeen \"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the flight numbers of flights leaving from Aberdeen."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
What are flight numbers of flights arriving at City \"Aberdeen\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Give the flight numbers of flights arriving in Aberdeen."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen, Abilene ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Find the number of flights landing in the city of Aberdeen or Abilene."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city ( Aberdeen, Abilene ), airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
How many flights land in Aberdeen or Abilene?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Find the name of airports which do not have any flight in and out."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# airlines ( uid, airline, abbreviation, country )
# airports ( city, airportcode, airportname, country, countryabbrev )
# flights ( airline, flightno, sourceairport, destairport )

Question:
Which airports do not have departing or arriving flights?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
How many employees are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Count the number of employees"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Sort employee names by their age in ascending order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
List the names of employees and sort in ascending order of age."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What is the number of employees from each city?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Count the number of employees for each city."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which cities do more than one employee under age 30 come from?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the cities that have more than one employee under age 30."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the number of shops in each location."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
How many shops are there in each location?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the manager name and district of the shop whose number of products is the largest."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What are the manager name and district of the shop that sells the largest number of products?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
find the minimum and maximum number of products of all stores."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What are the minimum and maximum number of products across all the shops?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Return the name, location and district of all shops in descending order of number of products."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Sort all the shops by number products in descending order, and return the name, location and district of each shop."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the names of stores whose number products is more than the average number of products."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which shops' number products is above the average? Give me the shop names."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
find the name of employee who was awarded the most times in the evaluation."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which employee received the most awards in evaluations? Give me the employee name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the name of the employee who got the highest one time bonus."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which employee received the biggest bonus? Give me the employee name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the names of employees who never won any award in the evaluation."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What are the names of the employees who never received any evaluation?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What is the name of the shop that is hiring the largest number of employees?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which shop has the most employees? Give me the shop name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the name of the shops that do not hire any employee."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which shops run with no employees? Find the shop names"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the number of employees hired in each shop; show the shop name as well."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
For each shop, return the number of employees working there and the name of the shop."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What is total bonus given in all evaluations?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the total amount of bonus given in all the evaluations."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Give me all the information about hiring."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
What is all the information about hiring?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Which district has both stores with less than 3000 products and stores with more than 10000 products?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
How many different store locations are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# employee ( employee_id, name, age, city )
# shop ( shop_id, name, location, district, number_products, manager_name )
# hiring ( shop_id, employee_id, start_from, is_full_time )
# evaluation ( employee_id, year_awarded, bonus )

Question:
Count the number of distinct store locations."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many documents do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of documents."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
List document IDs, document names, and document descriptions for all documents."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids, names, and descriptions for all documents?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the document name and template id for document with description with the letter 'w' in it?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the names and template ids for documents that contain the letter w in their description."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( CV ), template_type_description ( CV ) )
# templates ( template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Robbin CV ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the document id, template id and description for document named \"Robbin CV\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( CV ), template_type_description ( CV ) )
# templates ( template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Robbin CV ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the document id, template id, and description for the document with the name Robbin CV."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many different templates do all document use?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of different templates used for documents."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( PPT ), template_type_description )
# templates ( template_id, version_number, template_type_code ( PPT ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many documents are using the template with type code 'PPT'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( PPT ), template_type_description )
# templates ( template_id, version_number, template_type_code ( PPT ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of documents that use the PPT template type."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template ids and number of documents using each template."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are all different template ids used for documents, and how many times were each of them used?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the id and type code for the template used by the most documents?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the id and type code of the template that is used for the greatest number of documents."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show ids for all templates that are used by more than one document."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the template ids of any templates used in more than a single document?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show ids for all templates not used by any document."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids for templates that are not used in any documents?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many templates do we have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of templates."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show template ids, version numbers, and template type codes for all templates."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids, version numbers, and type codes for each template?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all distinct template type codes for all templates."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the different template type codes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( PP, PPT ), template_type_description )
# templates ( template_id, version_number, template_type_code ( PP, PPT ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids of templates with template type code PP or PPT?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( PP, PPT ), template_type_description )
# templates ( template_id, version_number, template_type_code ( PP, PPT ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the ids of templates that have the code PP or PPT."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( CV ), template_type_description ( CV ) )
# templates ( template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many templates have template type code CV?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( CV ), template_type_description ( CV ) )
# templates ( template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of templates of the type CV."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the version number and template type code for the template with version number later than 5?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the version numbers and template type codes of templates with a version number greater than 5."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template type codes and number of templates for each."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the different template type codes, and how many templates correspond to each?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Which template type code has most number of templates?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the type code of the template type that the most templates belong to."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template type codes with less than three templates."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the codes of template types that have fewer than 3 templates?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What the smallest version number and its template type code?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the lowest version number, along with its corresponding template type code."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Data base ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the template type code of the template used by document with the name \"Data base\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Data base ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the template type code of the template that is used by a document named Data base."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( BK ), template_type_description )
# templates ( template_id, version_number, template_type_code ( BK ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all document names using templates with template type code BK."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( BK ), template_type_description )
# templates ( template_id, version_number, template_type_code ( BK ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the names of documents that use templates with the code BK?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template type codes and the number of documents using each type."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the different template type codes, and how many documents use each type?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Which template type code is used by most number of documents?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the code of the template type that is most commonly used in documents."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template type codes that are not used by any document."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the codes of template types that are not used for any document?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all template type codes and descriptions."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the type codes and descriptions for all template types?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( AD ), template_type_description )
# templates ( template_id, version_number, template_type_code ( AD ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the template type descriptions for template type code \"AD\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code ( AD ), template_type_description )
# templates ( template_id, version_number, template_type_code ( AD ), date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the template type description of the template type with the code AD."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description ( Book ) )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the template type code for template type description \"Book\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description ( Book ) )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the type code of the template type with the description \"Book\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the distinct template type descriptions for the templates ever used by any document?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the different descriptions for templates that have been used in a document."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description ( Presentation ) )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the template ids with template type description \"Presentation\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description ( Presentation ) )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the ids corresponding to templates with the description 'Presentation'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many paragraphs in total?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of paragraphs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Summer Show ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
How many paragraphs for the document with name 'Summer Show'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Summer Show ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Count the number of paragraphs in the document named 'Summer Show'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text ( Korea ), other_details )

Question:
Show paragraph details for paragraph with text 'Korea ' ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text ( Korea ), other_details )

Question:
What are the details for the paragraph that includes the text 'Korea ' ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Welcome to NY ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all paragraph ids and texts for the document with name 'Welcome to NY'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Welcome to NY ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Customer reviews ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all paragraph texts for the document \"Customer reviews\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name ( Customer reviews ), document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the paragraph texts for the document with the name 'Customer reviews'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all document ids and the number of paragraphs in each document. Order by document id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Show all document ids, names and the number of paragraphs in each document."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids and names of each document, as well as the number of paragraphs in each?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
List all document ids with at least two paragraphs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What are the ids of documents that have 2 or more paragraphs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the document id and name with greatest number of paragraphs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the id and name of the document with the most paragraphs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the document id with least number of paragraphs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Return the id of the document with the fewest paragraphs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
What is the document id with 1 to 2 paragraphs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )

Question:
Give the ids of documents that have between one and two paragraphs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text ( Brazil, Ireland ), other_details )

Question:
Show the document id with paragraph text 'Brazil' and 'Ireland'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_template_types ( template_type_code, template_type_description )
# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )
# documents ( document_id, template_id, document_name, document_description, other_details )
# paragraphs ( paragraph_id, document_id, paragraph_text ( Brazil, Ireland ), other_details )

Question:
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
How many teachers are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What is the total count of teachers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
List the names of teachers in ascending order of age."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers ordered by ascending age?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the age and hometown of teachers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What is the age and hometown of every teacher?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown ( Little Lever Urban District ) )
# course_arrange ( course_id, teacher_id, grade )

Question:
List the name of teachers whose hometown is not `` Little Lever Urban District '' ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown ( Little Lever Urban District ) )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show the name of teachers aged either 32 or 33?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers who are aged either 32 or 33?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What is the hometown of the youngest teacher?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Where is the youngest teacher from?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show different hometown of teachers and the number of teachers from each hometown."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
For each hometown, how many teachers are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
List the most common hometown of teachers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What is the most commmon hometowns for teachers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show the hometowns shared by at least two teachers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the towns from which at least two teachers come from?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show names of teachers and the courses they are arranged to teach."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What is the name of each teacher and what course they teach?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course ( Math ) )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show the name of the teacher for the math course."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course ( Math ) )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the people who teach math courses?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show names of teachers and the number of courses they teach."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers and how many courses do they teach?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
Show names of teachers that teach at least two courses."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers who teach at least two courses?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
List the names of teachers who have not been arranged to teach courses."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# course ( course_id, staring_date, course )
# teacher ( teacher_id, name, age, hometown )
# course_arrange ( course_id, teacher_id, grade )

Question:
What are the names of the teachers whose courses have not been arranged?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
How many visitors below age 30 are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What is the average age of the visitors whose membership level is not higher than 4?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the id and name of the museum that has the most staff members?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the average number of staff working for the museums that were open before 2009."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name ( Plaza Museum ), num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What are the opening year and staff number of the museum named Plaza Museum?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
find the id, name and age for visitors who visited some museums more than once."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What are the id and name of the museum visited most times?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What is the name of the museum that had no visitor yet?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the name and age of the visitor who bought the most tickets at once."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What are the average and maximum number of tickets bought in all visits?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What is the total ticket expense of the visitors whose membership level is 1?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
Find the number of visitors who did not visit any museum opened after 2010."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# museum ( museum_id, name, num_of_staff, open_year )
# visitor ( id, name, level_of_membership, age )
# visit ( museum_id, visitor_id, num_of_ticket, total_spent )

Question:
How many museums were opened after 2013 or before 2008?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the total number of players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many players are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the total number of matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Count the number of matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code ( USA ) )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
List the first name and birth date of all players from the country with code USA."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code ( USA ) )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the first names and birth dates of players from the USA?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the average age of losers and winners of all matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the average ages of losers and winners across matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the average rank of winners in all matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the average rank for winners in all matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the highest rank of losers in all matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the best rank of losers across all matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
find the number of distinct country codes of all players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many distinct countries do players come from?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the number of distinct name of losers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many different loser names are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the name of tourney that has more than 10 matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the names of tournaments that have more than 10 matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
List the names of all winners who played in both 2013 and 2016."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the names of players who won in both 2013 and 2016?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
List the number of all matches who played in years of 2013 or 2016."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many matches were played in 2013 or 2016?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open, WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open, WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the first name and country code of the oldest player."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the first name and country code of the oldest player?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
List the first and last name of all players in the order of birth date."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the full names of all players, sorted by birth date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
List the first and last name of all players who are left / L hand in the order of birth date."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the full names of all left handed players, in order of birth date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the first name and country code of the player who did the most number of tours."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the first name and country code of the player with the most tours?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the year that has the most number of matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Which year had the most matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the name and rank points of the winner who won the most times."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the name of the winner who has won the most matches, and how many rank points does this player have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the name of the winner with the most rank points who participated in the Australian Open tournament?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
find the names of loser and winner who played in the match with greatest number of minutes."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the names of the winner and loser who played in the longest match?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the average ranking for each player and their first name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the first names of all players, and their average rankings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the total ranking points for each player and their first name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the first names of all players, and their total ranking points?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
find the number of players for each country."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many players are from each country?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
find the code of the country where has the greatest number of players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the code of the country with the most players?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the codes of countries that have more than 50 players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the codes of countries with more than 50 players?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the total number of tours for each ranking date."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many total tours were there for each ranking date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the number of matches happened in each year."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many matches were played in each year?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the name and rank of the 3 youngest winners across all matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What are the names and ranks of the three youngest winners across all matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many different winners both participated in the WTA Championships and were left handed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the number of left handed winners who participated in the WTA Championships."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the first name, country code and birth date of the winner who has the highest rank points in all matches."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name ( Date ), hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
Find the number of players for each hand type."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# players ( player_id, first_name, last_name, hand, birth_date, country_code )
# matches ( best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )
# rankings ( ranking_date, ranking, player_id, ranking_points, tours )

Question:
How many players are there for each hand type?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship ( Captured ) )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
How many ships ended up being 'Captured'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
List the name and tonnage ordered by in descending alphaetical order for the names."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
List the name, date and result of each battle."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What is maximum and minimum death toll caused each time?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What is the average number of injuries caused each time?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the death and injury situations caused by the ship with tonnage 't'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander ( Boril ), latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the name and results of the battles when the bulgarian commander is not 'Boril'"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type ( Brig ), location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the different ids and names of the battles that lost any 'Brig' type shipes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the ids and names of the battles that led to more than 10 people killed in total."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What is the ship id and name that caused most total injuries?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander ( Kaloyan ), latin_commander ( Baldwin I ), result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
How many different results are there for the battles?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
How many battles did not lose any ship with tonnage '225'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location ( English Channel ), disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# battle ( id, name, date, bulgarian_commander, latin_commander, result )
# ship ( lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship )
# death ( caused_by_ship_id, id, note, killed, injured )

Question:
What are the notes of the death events which has substring 'East'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
what are all the addresses including line 1 and line 2?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the first and second line for all addresses?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many courses in total are listed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many courses are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name ( math ), course_description, other_details )
# departments ( department_id, department_name ( math ), department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How is the math course described?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name ( math ), course_description, other_details )
# departments ( department_id, department_name ( math ), department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the descriptions for all the math courses?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the zip code of the address in the city Port Chelsea?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the zip code for Port Chelsea?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Which department offers the most number of degrees? List department name and id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the name and id of the department with the most number of degrees ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many departments offer any degree?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many different departments offer degrees?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many different degree names are offered?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many different degrees are offered?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many degrees does the engineering department offer?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many degrees does the engineering department have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names and descriptions of all the sections?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names and descriptions for all the sections?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names and id of courses having at most 2 sections?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names and ids of every course with less than 2 sections?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
List the section_name in reversed lexicographical order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names of the sections in reverse alphabetical order?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the semester which most student registered in? Show both the name and the id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
For each semester, what is the name and id of the one with the most students registered?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the description of the department whose name has the substring the computer?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the department description for the one whose name has the word computer?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name ( Bachelor ), degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the first, middle, and last names for everybody enrolled in a Bachelors program?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Find the kind of program which most number of students are enrolled in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the degree summary name that has the most number of students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Find the program which most number of students are enrolled in. List both the id and the summary."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the program id and the summary of the degree that has the most students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Which semesters do not have any student enrolled? List the semester name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the name of the semester with no students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are all the course names of the courses which ever have students enrolled in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the names of all courses that have some students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What's the name of the course with most number of enrollments?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the name of the course with the most students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the last name of the students who live in North Carolina but have not registered in any degree programs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Show the date and id of the transcript with at least 2 course results."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the date and id of the transcript with at least 2 courses listed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name ( Timmothy ), middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the phone number of the man with the first name Timmothy and the last name Ward?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name ( Timmothy ), middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the mobile phone number of the student named Timmothy Ward ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Who is the first student to register? List the first name, middle name and last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the first, middle, and last name of the first student to register?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Who is the earliest graduate of the school? List the first name, middle name and last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the first, middle, and last name of the earliest school graduate?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Whose permanent address is different from his or her current address? List his or her first name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the first name of the student whose permanent address is different from his or her current one?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Which address holds the most number of students currently? List the address id and all lines."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the id, line 1, and line 2 of the address with the most students?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
On average, when were the transcripts printed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the average transcript date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
When is the first transcript released? List the date and details."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the earliest date of a transcript release, and what details can you tell me?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many transcripts are released?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many transcripts are listed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the last transcript release date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
When was the last transcript released?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Show the date of the transcript which shows the least number of results, also list the id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the date and id of the transcript with the least number of results?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name ( Bachelor, Master ), degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Find the semester when both Master students and Bachelor students got enrolled in."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the id of the semester that had both Masters and Bachelors students enrolled?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
How many different addresses do the students currently live?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the different addresses that have students living there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
List all the student details in reversed lexicographical order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What other details can you tell me about students in reverse alphabetical order?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Describe the section h."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What is the description for the section named h?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details )
# courses ( course_id, course_name, course_description, other_details )
# departments ( department_id, department_name, department_description, other_details )
# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )
# sections ( section_id, course_id, section_name, section_description, other_details )
# semesters ( semester_id, semester_name, semester_description, other_details )
# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )
# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )
# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )
# transcripts ( transcript_id, transcript_date, other_details )
# transcript_contents ( student_course_id, transcript_id )

Question:
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the title of all cartoons in alphabetical order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are the titles of the cartoons sorted alphabetically?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
List all cartoon directed by \"Ben Jones\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
What are the names of all cartoons directed by Ben Jones?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel )

Question:
How many cartoons were written by \"Joseph Kuhr\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel )

Question:
What is the number of cartoones written by Joseph Kuhr?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
list all cartoon titles and their directors ordered by their air date"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the name and directors of all the cartoons that are ordered by air date?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones, Brandon Vietti ), written_by, original_air_date, production_code, channel )

Question:
List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones, Brandon Vietti ), written_by, original_air_date, production_code, channel )

Question:
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
Which country has the most of TV Channels? List the country and number of TV Channels it has."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the country with the most number of TV Channels and how many does it have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the number of different series names and contents in the TV Channel table."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
How many different series and contents are listed in the TV Channel table?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the content of TV Channel with serial name \"Sky Radio\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the content of the series Sky Radio?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the Package Option of TV Channel with serial name \"Sky Radio\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are the Package Options of the TV Channels whose series names are Sky Radio?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
How many TV Channel using language English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
How many TV Channels use the English language?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the language used least number of TV Channel. List language and number of TV Channel."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are the languages used by the least number of TV Channels and how many channels use it?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List each language and the number of TV Channels using it."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
For each language, list the number of TV Channels that use it."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the Episode of all TV series sorted by rating."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are all of the episodes ordered by ratings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List top 3 highest Rating  TV series. List the TV series's Episode and Rating."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are 3 most highly rated episodes in the TV series table and what were those ratings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is minimum and maximum share of TV series?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the maximum and minimum share for the TV series?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the air date of TV series with Episode \"A Love of a Lifetime\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
When did the episode \"A Love of a Lifetime\" air?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the weekly rank for the episode \"A Love of a Lifetime\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the name of the series that has the episode \"A Love of a Lifetime\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the episode for the TV series named \"Sky Radio\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
Find the number of cartoons directed by each of the listed directors."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
How many cartoons did each director create?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
Find the production code and channel of the most recently aired cartoon ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the produdction code and channel of the most recent cartoon ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
Find the package choice and series name of the TV channel that has high definition TV."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are the package options and the name of the series for the TV Channel that supports high definition TV?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel )

Question:
which countries' tv channels are playing some cartoon written by Todd Casey?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel )

Question:
What are the countries that have cartoons on TV that were written by Todd Casey?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel )

Question:
which countries' tv channels are not playing any cartoon written by Todd Casey?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel )

Question:
What are the countries that are not playing cartoons written by Todd Casey?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones, Michael Chang ), written_by, original_air_date, production_code, channel )

Question:
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones, Michael Chang ), written_by, original_air_date, production_code, channel )

Question:
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
find the pixel aspect ratio and nation of the tv channels that do not use English."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
find id of the tv channels that from the countries where have more than two tv channels."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )

Question:
What are the ids of all tv channels that have more than 2 TV channels?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
find the id of tv channels that do not play any cartoon directed by Ben Jones."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
find the package option of the tv channel that do not have any cartoon directed by Ben Jones."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) )
# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )
# cartoon ( id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel )

Question:
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
How many poker players are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Count the number of poker players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
List the earnings of poker players in descending order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the earnings of poker players, ordered descending by value?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
List the final tables made and the best finishes of poker players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the final tables made and best finishes for all poker players?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the average earnings of poker players?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the average earnings across all poker players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the money rank of the poker player with the highest earnings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the money rank of the player with the greatest earnings."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the maximum number of final tables made among poker players with earnings less than 200000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the maximum final tables made across all poker players who have earnings below 200000."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names of poker players?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the names of all the poker players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names of poker players whose earnings is higher than 300000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Give the names of poker players who have earnings above 300000."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
List the names of poker players ordered by the final tables made in ascending order."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names of poker players, ordered ascending by the number of final tables they have made?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the birth date of the poker player with the lowest earnings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the birth date of the poker player with the lowest earnings."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the money rank of the tallest poker player?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the money rank of the poker player with the greatest height."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the average earnings of poker players with height higher than 200?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Give average earnings of poker players who are taller than 200."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names of poker players in descending order of earnings?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the names of poker players sorted by their earnings descending."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are different nationalities of people and the corresponding number of people from each nation?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
How many people are there of each nationality?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What is the most common nationality of people?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Give the nationality that is most common across all people."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the nationalities that are shared by at least two people?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Return the nationalities for which there are two or more people."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
List the names and birth dates of people in ascending alphabetical order of name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names and birth dates of people, ordered by their names in alphabetical order?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality ( Russia ), name, birth_date, height )

Question:
Show names of people whose nationality is not \"Russia\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality ( Russia ), name, birth_date, height )

Question:
What are the names of people who are not from Russia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
List the names of people that are not poker players."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
What are the names of people who do not play poker?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
How many distinct nationalities are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# poker_player ( poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings )
# people ( people_id, nationality, name, birth_date, height )

Question:
Count the number of different nationalities."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
How many states are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
List the contestant numbers and names, ordered by contestant name descending."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
List the vote ids, phone numbers and states of all votes."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What are the maximum and minimum values of area codes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state ( CA ) )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state ( CA ), contestant_number, created )

Question:
What is last date created of votes from the state 'CA'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name ( Jessie Alloway ) )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What are the names of the contestants whose names are not 'Jessie Alloway'"

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What are the distinct states and create time of all votes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What are the contestant numbers and names of the contestants who had at least two votes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state ( CA, NY ) )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state ( CA, NY ), contestant_number, created )

Question:
What are the number of votes from state 'NY' or 'CA'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
How many contestants did not get voted?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What is the area code in which the most voters voted?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name ( Tabatha Gehling ) )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state )
# contestants ( contestant_number, contestant_name ( Kelly Clauss, Tabatha Gehling ) )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# area_code_state ( area_code, state ( AL ) )
# contestants ( contestant_number, contestant_name )
# votes ( vote_id, phone_number, state, contestant_number, created )

Question:
Return the names of the contestants whose names contain the substring 'Al' ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the names of all the countries that became independent after 1950?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the names of the nations that were founded after 1950."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many countries have a republic as their form of government?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many countries have governments that are republics?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Caribbean ), isofficial, percentage )

Question:
What is the total surface area of the countries in the Caribbean region?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How much surface area do the countires in the Carribean cover together?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which continent is Anguilla in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the continent name which Anguilla belongs to?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name ( Kabul ), countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which region is the city Kabul located in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name ( Kabul ), countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What region is Kabul in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which language is the most popular in Aruba?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What language is predominantly spoken in Aruba?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the population and life expectancies in Brazil?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give me Brazil's population and life expectancies."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the region and population of Angola?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What region does Angola belong to and what is its population?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district ( Central ), population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the average expected life expectancy for countries in the region of Central Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district ( Central ), population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How long is the people's average life expectancy in Central Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the name of country that has the shortest life expectancy in Asia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the name of the country in Asia with the lowest life expectancy."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total population and maximum GNP in Asia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many people live in Asia, and what is the largest GNP among them?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the average life expectancy in African countries that are republics?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the average life expectancy for countries in Africa which are republics?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total surface area of the continents Asia and Europe?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the total surface area covered by countries in Asia or Europe."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district ( Gelderland ), population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many people live in Gelderland district?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district ( Gelderland ), population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total population of Gelderland district?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the average GNP and total population in all nations whose government is US territory?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the mean GNP and total population of nations which are considered US territory."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many unique languages are spoken in the world?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the number of distinct languages used around the world?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many type of governments are in Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many different forms of governments are there in Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total number of languages used in Aruba?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many languages are spoken in Aruba?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many official languages does Afghanistan have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many official languages are spoken in Afghanistan?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is name of the country that speaks the largest number of languages?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the name of the nation that uses the greatest amount of languages."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which continent has the most diverse languages?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which continent speaks the most languages?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
How many countries speak both English and Dutch?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
What is the number of nations that use English and Dutch?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English, French ), isofficial, percentage )

Question:
What are the names of nations speak both English and French?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English, French ), isofficial, percentage )

Question:
Give the names of nations that speak both English and French."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English, French ), isofficial, percentage )

Question:
What are the names of nations where both English and French are official languages?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English, French ), isofficial, percentage )

Question:
Give the names of countries with English and French as official languages."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Chinese ), isofficial, percentage )

Question:
What is the number of distinct continents where Chinese is spoken?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Chinese ), isofficial, percentage )

Question:
How many continents speak Chinese?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
What are the regions that use English or Dutch?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
Which regions speak Dutch or English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
What are the countries where either English or Dutch is the official language ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Dutch, English ), isofficial, percentage )

Question:
Which countries have either English or Dutch as an official language?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which language is the most popular on the Asian continent?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the language that is used by the largest number of Asian nations?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which languages are spoken by only one country in republic governments?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What languages are only used by a single country with a republic government?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Find the city with the largest population that uses English."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What is the most populace city that speaks English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Find the name, population and expected life length of asian country with the largest area?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the name, population, and life expectancy of the largest Asian country by land?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What is average life expectancy in the countries where English is not the official language?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Give the mean life expectancy of countries in which English is not the official language."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What is the total number of people living in the nations that do not use English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
How many people live in countries that do not speak English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the official language spoken in the country whose head of state is Beatrix?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the official language used in the country the name of whose head of state is Beatrix."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total number of unique official languages spoken in the countries that are founded before 1930?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
For the countries founded before 1930, what is the total number of distinct official languages?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the countries that have greater surface area than any country in Europe?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which countries have greater area than that of any country in Europe?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the African countries that have a  population less than any country in Asia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which African countries have a smaller population than that of any country in Asia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which Asian countries have a population that is larger than any country in Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the Asian countries which have a population larger than that of any country in Africa?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What are the country codes for countries that do not speak English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Return the country codes for countries that do not speak English."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What are the country codes of countries where people use languages other than English?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Give the country codes for countries in which people speak langauges that are not English."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What are the codes of the countries that do not speak English and whose government forms are not Republic?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Return the codes of countries that do not speak English and do not have Republics for governments."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
Which cities are in European countries where English is not the official language?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( English ), isofficial, percentage )

Question:
What are the names of cities in Europe for which English is not the official language?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Chinese ), isofficial, percentage )

Question:
Which unique cities are in Asian countries where Chinese is the official language ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Chinese ), isofficial, percentage )

Question:
Return the different names of cities that are in Asia and for which Chinese is the official language."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name ( Independence ), countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the name, independence year, and surface area of the country with the smallest population?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name ( Independence ), countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the name, year of independence, and surface area of the country that has the lowest population."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the population, name and leader of the country with the largest area?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the name, population, and head of state for the country that has the largest area."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Find the number of cities in each district whose population is greater than the average population of cities?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
How many cities in each district have a population that is above the average population across all cities?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Find the government form name and total population for each government form whose average life expectancy is longer than 72."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the names and areas of countries with the top 5 largest area?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Return the names and surface areas of the 5 largest countries."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are names of countries with the top 3 largest population?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Return the names of the 3 most populated countries."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the names of the nations with the 3 lowest populations?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Return the names of the 3 countries with the fewest people."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
how many countries are in Asia?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Count the number of countries in Asia."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the names of the countries that are in the continent of Europe and have a population of 80000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the names of countries that are in Europe and have a population equal to 80000."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the cities whose population is between 160000 and 900000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Return the names of cities that have a population between 160000 and 900000 ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Which language is spoken by the largest number of countries?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
Give the language that is spoken in the most countries."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What is the language spoken by the largest percentage of people in each country?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language, isofficial, percentage )

Question:
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Spanish ), isofficial, percentage )

Question:
What is the total number of countries where Spanish is spoken by the largest percentage of people?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Spanish ), isofficial, percentage )

Question:
Count the number of countries for which Spanish is the predominantly spoken language."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Spanish ), isofficial, percentage )

Question:
What are the codes of countries where Spanish is spoken by the largest percentage of people?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# city ( id, name, countrycode, district, population )
# sqlite_sequence ( name, seq )
# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )
# countrylanguage ( countrycode, language ( Spanish ), isofficial, percentage )

Question:
Return the codes of countries for which Spanish is the predominantly spoken language."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
How many conductors are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Count the number of conductors."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
List the names of conductors in ascending order of age."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors, ordered by age?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality ( USA ), year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors whose nationalities are not \"USA\"?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality ( USA ), year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Return the names of conductors that do not have the nationality \"USA\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the record companies of orchestras in descending order of years in which they were founded?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Return the record companies of orchestras, sorted descending by the years in which they were founded."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What is the average attendance of shows?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Return the average attendance across all shows."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type ( Live final ), date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the maximum and minimum share of performances whose type is not \"Live final\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type ( Live final ), date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Return the maximum and minimum shares for performances that do not have the type \"Live final\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
How many different nationalities do conductors have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Count the number of different nationalities of conductors."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
List names of conductors in descending order of years of work."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors, sorted descending by the number of years they have worked?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
List the name of the conductor with the most years of work."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What is the name of the conductor who has worked the greatest number of years?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Show the names of conductors and the orchestras they have conducted."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors as well as the corresonding orchestras that they have conducted?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Show the names of conductors that have conducted more than one orchestras."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors who have conducted at more than one orchestra?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Show the name of the conductor that has conducted the most number of orchestras."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What is the name of the conductor who has conducted the most orchestras?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Please show the name of the conductor that has conducted orchestras founded after 2008."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the names of conductors who have conducted orchestras founded after the year 2008?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Please show the different record companies and the corresponding number of orchestras."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
How many orchestras does each record company manage?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Please show the record formats of orchestras in ascending order of count."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the major record formats of orchestras, sorted by their frequency?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
List the record company shared by the most number of orchestras."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What is the record company used by the greatest number of orchestras?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
List the names of orchestras that have no performance."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the orchestras that do not have any performances?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Show the record companies shared by orchestras founded before 2003 and after 2003."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format ( CD, DVD ) )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Find the number of orchestras whose record format is \"CD\" or \"DVD\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format ( CD, DVD ) )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Count the number of orchestras that have CD or DVD as their record format."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
Show the years in which orchestras that have given more than one performance are founded."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# conductor ( conductor_id, name, age, nationality, year_of_work )
# orchestra ( orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format )
# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )
# show ( show_id, performance_id, if_first_show, result, attendance )

Question:
What are years of founding for orchestras that have had more than a single performance?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many high schoolers are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Count the number of high schoolers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names and grades of each high schooler."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names and grades for each high schooler?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show all the grades of the high schoolers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is the grade of each high schooler?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What grade is Kyle in?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Return the grade for the high schooler named Kyle."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of all high schoolers in grade 10."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of all high schoolers in grade 10?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the ID of the high schooler named Kyle."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is Kyle's id?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many high schoolers are there in grade 9 or 10?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Count the number of high schoolers in grades 9 or 10."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the number of high schoolers for each grade."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many high schoolers are in each grade?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Which grade has the most high schoolers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Return the grade that has the greatest number of high schoolers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show me all grades that have at least 4 students."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Which grades have 4 or more high schoolers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the student IDs and numbers of friends corresponding to each."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many friends does each student have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of high school students and their corresponding number of friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of the high schoolers and how many friends does each have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is the name of the high schooler who has the greatest number of friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Return the name of the high school student with the most friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of high schoolers who have at least 3 friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of high schoolers who have 3 or more friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of all of the high schooler Kyle's friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Return the names of friends of the high school student Kyle."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many friends does the high school student Kyle have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Count the number of friends Kyle has."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show ids of all students who do not have any friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the ids of high school students who do not have friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show names of all high school students who do not have any friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of students who have no friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the ids of high schoolers who have friends and are also liked by someone else."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the ids of students who both have friends and are liked?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show name of all students who have some friends and also are liked by someone else."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of high schoolers who both have friends and are liked?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Count the number of likes for each student id."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many likes correspond to each student id?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of high schoolers who have likes, and numbers of likes for each."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of high schoolers who have likes, and how many likes does each have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is the name of the high schooler who has the greatest number of likes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Give the name of the student with the most likes."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of students who have at least 2 likes."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of students who have 2 or more likes?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Show the names of students who have a grade higher than 5 and have at least 2 friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
How many likes does Kyle have?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name ( Kyle ), grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Return the number of likes that the high schooler named Kyle has."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Find the average grade of all students who have some friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is the average grade of students who have friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
Find the minimum grade of students who have no friends."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# highschooler ( id, name, grade )
# friend ( student_id, friend_id )
# likes ( student_id, liked_id )

Question:
What is the lowest grade of students who do not have any friends?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which states have both owners and professionals living there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the states where both owners and professionals live."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the average age of the dogs who have gone through any treatments?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the average age of the dogs who went through treatments."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which first names are used for professionals or owners but are not used as dog names?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the first names that are used for professionals or owners but are not used as dog names."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professional did not operate any treatment on dogs? List the professional's id, role and email."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Give me the id, role and email of the professionals who did not perform any treatment on dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which owner owns the most dogs? List the owner id, first name and last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Return the owner id, first name and last name of the owner who has the most dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professionals have done at least two treatments? List the professional's id, role, and first name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the id, role, and first name of the professionals who have performed two or more treatments?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the name of the breed with the most dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which breed do the most dogs have? Give me the breed name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the description of the treatment type that costs the least money in total?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Give me the description of the treatment type whose total cost is the lowest."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professionals have done at least two types of treatments? List the professional id and cell phone."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the id and cell phone of the professionals who operate two or more types of treatments."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the first name and last name of the professionals who have done treatment with cost below average?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the date of each treatment, together with the first name of the professional who operated it."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the date and the operating professional's first name of each treatment?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the cost of each treatment and the corresponding treatment type description."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the cost and treatment type description of each treatment?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List each owner's first name, last name, and the size of his for her dog."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are each owner's first name, last name, and the size of their dog?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List pairs of the owner's first name and the dogs's name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are each owner's first name and their dogs's name?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the names of the dogs of the rarest breed and the treatment dates of them."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which dogs are of the rarest breed? Show their names and treatment dates."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the first names of owners living in Virginia and the names of dogs they own."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the arriving date and the departing date of the dogs who have gone through a treatment?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the arriving date and the departing date of the dogs that received a treatment."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the last name of the owner owning the youngest dog."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Who owns the youngest dog? Give me his or her last name."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state ( Hawaii, Wisconsin ), zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state ( Hawaii, Wisconsin ), zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the arriving date and the departing date of all the dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the arrival date and the departure date for all the dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many dogs went through any treatments?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Count the number of dogs that went through a treatment."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many professionals have performed any treatment to dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the number of professionals who have ever treated dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many dogs have an age below the average?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Count the number of dogs of an age below the average."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How much does the most recent treatment cost?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Show me the cost of the most recently performed treatment."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many dogs have not gone through any treatment?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Tell me the number of dogs that have not received any treatment ."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many owners temporarily do not have any dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the number of owners who do not own any dogs at this moment."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How many professionals did not operate any treatment on dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the number of professionals who have not treated any dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the average age of all the dogs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Compute the average age of all the dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the age of the oldest dog?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Tell me the age of the oldest dog."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How much does each charge type costs? List both charge type and amount."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List each charge type and its amount."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
How much does the most expensive charge type costs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What is the charge amount of the most expensive charge type?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the email, cell phone and home phone of all the professionals."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are the email, cell phone and home phone of each professional?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are all the possible breed type and size type combinations?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
Find the distinct breed type and size type combinations for dogs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
List the first name of all the professionals along with the description of the treatment they have done."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# breeds ( breed_code, breed_name )
# charges ( charge_id, charge_type, charge_amount )
# sizes ( size_code, size_description )
# treatment_types ( treatment_type_code, treatment_type_description )
# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )
# dogs ( dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )
# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )
# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )

Question:
What are each professional's first name and description of the treatment they have performed?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
How many singers are there?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What is the count of singers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
List the name of singers in ascending order of net worth."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the names of singers ordered by ascending net worth?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the birth year and citizenship of singers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the birth years and citizenships of the singers?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship ( France ) )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
List the name of singers whose citizenship is not \"France\"."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the names of the singers who are not French citizens?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show the name of singers whose birth year is either 1948 or 1949?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the names of the singers whose birth years are either 1948 or 1949?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What is the name of the singer with the largest net worth?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What is the name of the singer who is worth the most?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show different citizenship of singers and the number of singers of each citizenship."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
For each citizenship, how many singers are from that country?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Please show the most common citizenship of singers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What is the most common singer citizenship ?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show different citizenships and the maximum net worth of singers of each citizenship."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
For each citizenship, what is the maximum net worth?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show titles of songs and names of singers."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the song titles and singer names?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show distinct names of singers that have songs with sales more than 300000."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
what are the different names of the singers that have sales more than 300000?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show the names of singers that have more than one song."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the names of the singers that have more than one songs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show the names of singers and the total sales of their songs."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
For each singer name, what is the total sales for their songs?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
List the name of singers that do not have any song."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What is the sname of every sing that does not have any song?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
Show the citizenship shared by singers with birth year before 1945 and after 1955."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )
# song ( song_id, title, singer_id, sales, highest_position )

Question:
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_feature_types ( feature_type_code, feature_type_name )
# ref_property_types ( property_type_code, property_type_description )
# other_available_features ( feature_id, feature_type_code, feature_name, feature_description )
# properties ( property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )
# other_property_features ( property_id, feature_id, property_feature_description )

Question:
How many available features are there in total?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_feature_types ( feature_type_code, feature_type_name )
# ref_property_types ( property_type_code, property_type_description )
# other_available_features ( feature_id, feature_type_code, feature_name ( AirCon ), feature_description )
# properties ( property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )
# other_property_features ( property_id, feature_id, property_feature_description )

Question:
What is the feature type name of feature AirCon?


Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_feature_types ( feature_type_code, feature_type_name )
# ref_property_types ( property_type_code, property_type_description )
# other_available_features ( feature_id, feature_type_code, feature_name, feature_description )
# properties ( property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )
# other_property_features ( property_id, feature_id, property_feature_description )

Question:
Show the property type descriptions of properties belonging to that code."

Given the database schema and question, perform the following actions: 
1 - Rank all the tables based on the possibility of being used in the SQL according to the question from the most relevant to the least relevant, Table or its column that matches more with the question words is highly relevant and must be placed ahead.
2 - Check whether you consider all the tables.
3 - Output a list object in the order of step 2, Your output should contain all the tables. The format should be like: 
[
    \"table_1\", \"table_2\", ...
]

Schema:
# ref_feature_types ( feature_type_code, feature_type_name )
# ref_property_types ( property_type_code ( Apartment, House ), property_type_description )
# other_available_features ( feature_id, feature_type_code, feature_name, feature_description )
# properties ( property_id, property_type_code ( Apartment, House ), date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )
# other_property_features ( property_id, feature_id, property_feature_description )

Question:
What are the names of properties that are either houses or apartments with more than 1 room?